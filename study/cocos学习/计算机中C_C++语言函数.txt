1
void *memset(void *s, int ch, size_t n);
函数解释：将s中前n个字节 （typedef unsigned int size_t ）用 ch 替换并返回 s 。
size_t kMaxStringLen = 65535;
char g_buf[65535];
memset(g_buf, 0, kMaxStringLen);

2
函数声明:
int _vsnprintf(char* str, size_t size, const char* format, va_list ap);
参数说明:
char *str [out],把生成的格式化的字符串存放在这里.
size_t size [in], str可接受的最大字节数,防止产生数组越界.
const char *format [in], 指定输出格式的字符串，它决定了你需要提供的可变参数的类型、个数和顺序。
va_list ap [in], va_list变量. va:variable-argument:可变参数
函数功能：将可变参数格式化输出到一个字符数组。
返回值：执行成功，返回写入到字符数组str中的字符个数（不包含终止符），最大不超过size；执行失败，返回负值，并置errno.

例子：
size_t kMaxStringLen = 65535;
char g_buf[65535];
string Util_stringWithFormat( const char* str, ... )
{
    string tmp = "";
    va_list ap;
    va_start(ap, str);
    memset(g_buf, 0, kMaxStringLen);
    char* pBuf = g_buf;//(char*)malloc(kMaxStringLen);
    if (pBuf != NULL)
    {
        vsnprintf(pBuf, kMaxStringLen, str, ap);
        tmp = pBuf;
        //free(pBuf);
    }
    va_end(ap);
    
    return tmp;
}//将需要连接的字符串写入Util_stringWithFormat，返回连接后的string



